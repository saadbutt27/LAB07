$date
	Sat Jan 21 20:45:11 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 # muxOut [31:0] $end
$var wire 32 $ dataMemOut [31:0] $end
$var wire 1 % ResultSrc $end
$var wire 1 & RegWrite $end
$var wire 32 ' RD2 [31:0] $end
$var wire 32 ( RD1 [31:0] $end
$var wire 32 ) RD [31:0] $end
$var wire 32 * PC_w [31:0] $end
$var wire 32 + NextIns [31:0] $end
$var wire 1 , MemWrite $end
$var wire 32 - Instruction [31:0] $end
$var wire 2 . ImmSrc [1:0] $end
$var wire 32 / Extended [31:0] $end
$var wire 1 0 ALUSrc $end
$var wire 32 1 ALUResult [31:0] $end
$var wire 3 2 ALUControl [2:0] $end
$scope module ALU $end
$var wire 32 3 A_and_B [31:0] $end
$var wire 32 4 A_or_B [31:0] $end
$var wire 32 5 B_not [31:0] $end
$var wire 1 6 C $end
$var wire 1 7 V $end
$var wire 1 8 ctrl1_not $end
$var wire 32 9 not_Result [31:0] $end
$var wire 1 : xnor_A_B_ctrl0 $end
$var wire 1 ; xor_A_Sum $end
$var wire 3 < ctrl [2:0] $end
$var wire 1 = Z $end
$var wire 32 > S1 [31:0] $end
$var wire 32 ? Result [31:0] $end
$var wire 1 @ N $end
$var wire 1 A Cout $end
$var wire 32 B B [31:0] $end
$var wire 32 C A_sum_B [31:0] $end
$var wire 32 D A [31:0] $end
$upscope $end
$scope module Adder $end
$var wire 32 E Inp2 [31:0] $end
$var wire 32 F Sum [31:0] $end
$var wire 32 G Inp1 [31:0] $end
$upscope $end
$scope module Control_Unit $end
$var wire 1 H PCSrc $end
$var wire 3 I func3 [2:0] $end
$var wire 1 J func7 $end
$var wire 7 K op [6:0] $end
$var wire 1 L zero $end
$var wire 1 M op5 $end
$var wire 1 % ResultSrc $end
$var wire 1 & RegWrite $end
$var wire 1 , MemWrite $end
$var wire 2 N ImmSrc [1:0] $end
$var wire 1 O Branch $end
$var wire 1 0 ALUSrc $end
$var wire 2 P ALUOp [1:0] $end
$var wire 3 Q ALUControl [2:0] $end
$scope module alu_dec $end
$var wire 3 R func3 [2:0] $end
$var wire 1 J func7_5 $end
$var wire 1 M op5 $end
$var wire 2 S signal [1:0] $end
$var wire 2 T ALUOp [1:0] $end
$var wire 3 U ALUControl [2:0] $end
$upscope $end
$scope module main_dec $end
$var wire 7 V op [6:0] $end
$var wire 1 % ResultSrc $end
$var wire 1 & RegWrite $end
$var wire 1 , MemWrite $end
$var wire 2 W ImmSrc [1:0] $end
$var wire 1 O Branch $end
$var wire 1 0 ALUSrc $end
$var wire 2 X ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module Data_Memory $end
$var wire 32 Y A [31:0] $end
$var wire 1 , WE $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 Z WD [31:0] $end
$var wire 32 [ RD [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 1 " reset $end
$var wire 32 \ RD [31:0] $end
$var wire 32 ] A [31:0] $end
$upscope $end
$scope module Program_Counter $end
$var wire 32 ^ PCNext [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 32 _ PC [31:0] $end
$upscope $end
$scope module Register_File $end
$var wire 5 ` A1 [4:0] $end
$var wire 5 a A2 [4:0] $end
$var wire 5 b A3 [4:0] $end
$var wire 1 & WE3 $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 c WD3 [31:0] $end
$var wire 32 d RD2 [31:0] $end
$var wire 32 e RD1 [31:0] $end
$upscope $end
$scope module Sign_Extension $end
$var wire 32 f ImmInst [31:0] $end
$var wire 2 g ImmSrc [1:0] $end
$var wire 32 h ImmExt [31:0] $end
$upscope $end
$scope module mux2x1_1 $end
$var wire 32 i inp1 [31:0] $end
$var wire 32 j inp2 [31:0] $end
$var wire 1 0 signal $end
$var wire 32 k out [31:0] $end
$upscope $end
$scope module mux2x1_2 $end
$var wire 32 l inp1 [31:0] $end
$var wire 32 m inp2 [31:0] $end
$var wire 1 % signal $end
$var wire 32 n out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 n
bx m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
bx _
bx ^
bx ]
b0 \
bx [
b0 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
0O
b0 N
0M
zL
b0 K
0J
b0 I
0H
bx G
bx F
b100 E
b0 D
b0 C
b0 B
0A
0@
b0 ?
b0 >
1=
b0 <
0;
1:
b11111111111111111111111111111111 9
18
07
06
b11111111111111111111111111111111 5
b0 4
b0 3
b0 2
b0 1
00
b0 /
b0 .
b0 -
0,
bx +
bx *
bx )
b0 (
b0 '
0&
0%
b0 $
b0 #
1"
1!
$end
#50
0!
#100
07
1:
0@
b100 $
b100 c
b100 n
0=
b11111111111111111111111111111011 9
0;
b100 1
b100 ?
b100 Y
b100 l
06
b100 C
0A
b100 >
b11111111111111111111111111111011 5
b100 4
b100 #
b100 B
b100 k
1&
10
b100 /
b100 h
b100 j
bx '
bx Z
bx d
bx i
b101 b
b100 a
b10011 K
b10011 V
b10000000000001010010011 -
b10000000000001010010011 \
b10000000000001010010011 f
b100 +
b100 F
b100 ^
b0 *
b0 G
b0 ]
b0 _
0"
1!
#150
0!
#200
b110 $
b110 c
b110 n
b11111111111111111111111111111001 9
b110 1
b110 ?
b110 Y
b110 l
b110 C
b110 >
b11111111111111111111111111111001 5
b110 4
b110 #
b110 B
b110 k
b110 /
b110 h
b110 j
b110 b
b110 a
b11000000000001100010011 -
b11000000000001100010011 \
b11000000000001100010011 f
b1000 +
b1000 F
b1000 ^
b100 *
b100 G
b100 ]
b100 _
1!
#250
b110 '
b110 Z
b110 d
b110 i
0!
#300
b1010 $
b1010 c
b1010 n
b11111111111111111111111111110101 9
b1010 1
b1010 ?
b1010 Y
b1010 l
b1010 C
b100 3
1&
00
b100 (
b100 D
b100 e
b10 S
1M
b10 P
b10 T
b10 X
b1000 b
b101 `
b110011 K
b110011 V
b11000101000010000110011 -
b11000101000010000110011 \
b11000101000010000110011 f
b1100 +
b1100 F
b1100 ^
b1000 *
b1000 G
b1000 ]
b1000 _
1!
#350
0!
#400
1=
b0 $
b0 c
b0 n
b11111111111111111111111111111111 9
b0 >
b11111111111111111111111111111111 5
b0 4
b0 1
b0 ?
b0 Y
b0 l
0&
10
b0 )
b0 [
b0 m
b0 #
b0 B
b0 k
b0 C
b0 3
b0 /
b0 h
b0 j
b1010 '
b1010 Z
b1010 d
b1010 i
b0 (
b0 D
b0 e
1,
b1 .
b1 N
b1 W
b1 g
b0 P
b0 T
b0 X
b0 b
b1000 a
b0 `
b10 I
b10 R
b100011 K
b100011 V
b100000000010000000100011 -
b100000000010000000100011 \
b100000000010000000100011 f
b10000 +
b10000 F
b10000 ^
b1100 *
b1100 G
b1100 ]
b1100 _
1!
#450
0!
#500
16
1A
0:
b10 $
b10 c
b10 n
0=
b11111111111111111111111111111101 9
b1 2
b1 <
b1 Q
b1 U
b11111111111111111111111111111011 >
b11111111111111111111111111111011 5
b100 3
b10 1
b10 ?
b10 Y
b10 l
1&
00
bx )
bx [
bx m
b100 #
b100 B
b100 k
b10 C
b110 4
b10000000101 /
b10000000101 h
b10000000101 j
b100 '
b100 Z
b100 d
b100 i
b110 (
b110 D
b110 e
0,
b0 .
b0 N
b0 W
b0 g
b10 P
b10 T
b10 X
b1000 b
b101 a
b110 `
b11 S
1J
b0 I
b0 R
b110011 K
b110011 V
b1000000010100110000010000110011 -
b1000000010100110000010000110011 \
b1000000010100110000010000110011 f
b10100 +
b10100 F
b10100 ^
b10000 *
b10000 G
b10000 ]
b10000 _
1!
#550
0!
#600
b1010 )
b1010 [
b1010 m
1=
07
1:
0@
b11111111111111111111111111111111 9
b0 >
0;
b0 1
b0 ?
b0 Y
b0 l
b11111111111111111111111111111111 5
06
10
b1010 $
b1010 c
b1010 n
b0 #
b0 B
b0 k
b0 C
0A
b0 4
b0 3
b0 2
b0 <
b0 Q
b0 U
b0 /
b0 h
b0 j
b0 '
b0 Z
b0 d
b0 i
b0 (
b0 D
b0 e
0M
1%
b0 P
b0 T
b0 X
b1001 b
b0 a
b0 `
b0 S
0J
b10 I
b10 R
b11 K
b11 V
b10010010000011 -
b10010010000011 \
b10010010000011 f
b11000 +
b11000 F
b11000 ^
b10100 *
b10100 G
b10100 ]
b10100 _
1!
#650
0!
#700
08
b10 2
b10 <
b10 Q
b10 U
b10 3
bx )
bx [
bx m
0=
b11111111111111111111111111111101 9
b1010 >
b11111111111111111111111111110101 5
b10 1
b10 ?
b10 Y
b10 l
00
b10 $
b10 c
b10 n
b1010 #
b1010 B
b1010 k
b1100 C
b1010 4
b1001 /
b1001 h
b1001 j
b1010 '
b1010 Z
b1010 d
b1010 i
b10 (
b10 D
b10 e
b10 S
1M
0%
b10 P
b10 T
b10 X
b101 b
b1001 a
b1000 `
b111 I
b111 R
b110011 K
b110011 V
b100101000111001010110011 -
b100101000111001010110011 \
b100101000111001010110011 f
b11100 +
b11100 F
b11100 ^
b11000 *
b11000 G
b11000 ]
b11000 _
1!
#750
0!
#800
1;
b1010 $
b1010 c
b1010 n
b11111111111111111111111111110101 9
b1010 1
b1010 ?
b1010 Y
b1010 l
0:
b11111111111111111111111111110101 >
b11111111111111111111111111111000 C
b11 2
b11 <
b11 Q
b11 U
b110 b
b110 I
b110 R
b100101000110001100110011 -
b100101000110001100110011 \
b100101000110001100110011 f
b100000 +
b100000 F
b100000 ^
b11100 *
b11100 G
b11100 ]
b11100 _
1!
#850
0!
#900
0;
07
1:
0@
b1000 $
b1000 c
b1000 n
b11111111111111111111111111110111 9
b1000 >
18
b1000 1
b1000 ?
b1000 Y
b1000 l
b11111111111111111111111111110111 5
b1000 4
0&
10
b0 )
b0 [
b0 m
b1000 #
b1000 B
b1000 k
b1000 C
b0 3
b0 2
b0 <
b0 Q
b0 U
b1000 /
b1000 h
b1000 j
b10 '
b10 Z
b10 d
b10 i
b0 (
b0 D
b0 e
1,
b1 .
b1 N
b1 W
b1 g
b0 P
b0 T
b0 X
b1000 b
b101 a
b0 `
b10 I
b10 R
b100011 K
b100011 V
b10100000010010000100011 -
b10100000010010000100011 \
b10100000010010000100011 f
b100100 +
b100100 F
b100100 ^
b100000 *
b100000 G
b100000 ]
b100000 _
1!
#950
0!
#1000
x8
x:
x7
x@
x=
bx 9
bx >
bx 5
x;
bx 1
bx ?
bx Y
bx l
x6
x0
bx )
bx [
bx m
bx $
bx c
bx n
bx 2
bx <
bx Q
bx U
bx #
bx B
bx k
bx C
xA
bx 4
bx 3
x&
xH
bx /
bx h
bx j
bx '
bx Z
bx d
bx i
bx (
bx D
bx e
xM
x,
x%
xO
bx .
bx N
bx W
bx g
bx P
bx T
bx X
bx b
bx a
bx `
bx S
xJ
bx I
bx R
bx K
bx V
bx -
bx \
bx f
b101000 +
b101000 F
b101000 ^
b100100 *
b100100 G
b100100 ]
b100100 _
1!
